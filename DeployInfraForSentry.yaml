AWSTemplateFormatVersion: '2010-09-09'

Description: "Create 3 x Amazon EC2 instance running the Amazon Linux 2 AMI and 1 x ECR"

Parameters:

    MasterKeyName: # Match to TD Resources
        Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'
        Type: 'AWS::EC2::KeyPair::KeyName'
        ConstraintDescription: 'Must be the name of an existing EC2 KeyPair.'

    InspectionVPCCIDR: # Match to TD Resources
        Description: 'Please enter the IP range (CIDR notation) for the top level VPC'
        Type: String
        Default: 10.10.0.0/16

    ProtectedPublicSubnetCIDR: # Match to TD Resources
        Description: 'Please enter the IP range (CIDR notation) for a PROTECTED-PUBLIC subnet'
        Type: String
        Default: 10.10.10.0/24

    ProtectedPublicSubnetAZ: # Match to TD Resources
        Description: 'Please enter the Availability Zone that you want to use for the PROTECTED-PUBLIC subnet'
        Type: String
        Default: us-east-1a

Resources:
    # Create a VPC
    VPC: # Match to TD Resources
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref InspectionVPCCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true

    # Create an Internet Gateway
    InternetGateway: # Match to TD Resources
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
              - Key: Name
                Value: 'VPCIGW'

    # Attach the Internet Gateway to the VPC
    InternetGatewayAttachment: # Match to TD Resources
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    
    # Create a Protected Public Subnet
    ProtectedPublicSubnet: #Match to TD Resources
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref ProtectedPublicSubnetAZ
            CidrBlock: !Ref ProtectedPublicSubnetCIDR
            MapPublicIpOnLaunch: true

    #Creating the Elastic IP for the NAT Gateway
    NatGatewayEIP:
        Type: AWS::EC2::EIP
        DependsOn: InternetGatewayAttachment
        Properties:
            Domain: vpc

    #Creating the NAT Gateway that will be use in the Protected-Public Subnet
    NatGateway:
        Type: AWS::EC2::NatGateway
        Properties:
            AllocationId: !GetAtt NatGatewayEIP.AllocationId
            SubnetId: !Ref ProtectedPublicSubnet

    #Creating the Public Route table
    PublicRouteTable:
        Type: AWS::EC2::RouteTable
        Properties:
            VpcId: !Ref VPC
    
    #Add a default route in the Public Route table
    DefaultPublicRoute:
        Type: AWS::EC2::Route
        DependsOn: InternetGatewayAttachment
        Properties:
            RouteTableId: !Ref PublicRouteTable
            DestinationCidrBlock: 0.0.0.0/0
            GatewayId: !Ref InternetGateway

    #Associating the Protected-Public Subnet in the Public Route Table (Edge Association)
    ProtectedPublicSubnetRouteTableAssociation:
        Type: AWS::EC2::SubnetRouteTableAssociation
        Properties:
            RouteTableId: !Ref PublicRouteTable
            SubnetId: !Ref ProtectedPublicSubnet

    # Create Security Group for EC2 instances
    CloudSentryEC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: "Cloud Sentry EC2 Security Group"
            GroupDescription: 'Allow SSH inbound & outbound traffic'
            VpcId: !Ref VPC
            SecurityGroupIngress:
              - IpProtocol: tcp
                FromPort: 22
                ToPort: 22
                CidrIp: 0.0.0.0/0
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    #EC2 Role to be assumed and use to create the EC2 resources also allows SSM deployment.
    EC2Role:
        Type: AWS::IAM::Role
        Properties:
            RoleName: EC2RoleTechDay
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    Effect: Allow
                    Principal: 
                        Service:
                            - ec2.amazonaws.com
                    Action:
                        - "sts:AssumeRole"
            ManagedPolicyArns: 
                - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    #Instance profile
    EC2InstanceProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Path: /
            Roles:
                - !Ref EC2Role
    
    # Create first EC2 machine
    AWSServer01:
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId: ami-006dcf34c09e50022 # Amazon Linux 2: ImageID valid only in us-east-1 region
            InstanceType: t3.micro
            IamInstanceProfile: !Ref EC2InstanceProfile
            KeyName: !Ref MasterKeyName
            SubnetId: !Ref ProtectedPublicSubnet
            SecurityGroupIds:
              - !Ref CloudSentryEC2SecurityGroup
            UserData: 
                !Base64 | 
                    #!/bin/bash
                    sudo yum update -y
                    sudo yum install -y wget
                    sudo systemctl enable amazon-ssm-agent
                    sudo systemctl start amazon-ssm-agent
                    sudo yum install ec2-instance-connect

    # Create second EC2 machine
    AWSServer02:
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId: ami-006dcf34c09e50022 # Amazon Linux 2: ImageID valid only in us-east-1 region
            InstanceType: t3.micro
            IamInstanceProfile: !Ref EC2InstanceProfile
            KeyName: !Ref MasterKeyName
            SubnetId: !Ref ProtectedPublicSubnet
            SecurityGroupIds:
              - !Ref CloudSentryEC2SecurityGroup
            UserData: 
                !Base64 | 
                    #!/bin/bash
                    sudo yum update -y
                    sudo yum install -y wget
                    sudo systemctl enable amazon-ssm-agent
                    sudo systemctl start amazon-ssm-agent
                    sudo yum install ec2-instance-connect

    # Create third EC2 machine
    AWSServer03:
        Type: 'AWS::EC2::Instance'
        Properties:
            ImageId: ami-006dcf34c09e50022 # Amazon Linux 2: ImageID valid only in us-east-1 region
            InstanceType: t3.micro
            IamInstanceProfile: !Ref EC2InstanceProfile
            KeyName: !Ref MasterKeyName
            SubnetId: !Ref ProtectedPublicSubnet
            SecurityGroupIds:
              - !Ref CloudSentryEC2SecurityGroup
            UserData: 
                !Base64 | 
                    #!/bin/bash
                    sudo yum update -y
                    sudo yum install -y wget
                    sudo yum install -y unzip
                    sudo systemctl enable amazon-ssm-agent
                    sudo systemctl start amazon-ssm-agent
                    sudo yum install ec2-instance-connect
                    sudo mkdir -p /home/shared/documents/central
                    cd /home/shared/documents/central
                    sudo wget https://github.com/ytisf/theZoo/tree/master/malware/Binaries/Ransomware.XData/Ransomware.XData.zip -O /home/shared/documents/central/S3cretF1le8374953829478675444.zip
                    sudo wget http://www.eicar.org/download/eicar.com.txt -O Document-624352345276-Temp.pdf
                    sudo wget https://github.com/timb-machine/linux-malware/blob/main/malware/binaries/Lightning/48f9471c20316b295704e6f8feb2196dd619799edec5835734fc24051f45c5b7.elf.x86_64
                    sudo wget https://github.com/timb-machine/linux-malware/blob/main/malware/binaries/Tiganie_S3npai/29ae9389dcb1f5b0bc3a52543b3ddfc933a65c4943709907fd136decf717255c.elf.sparc
                    sudo wget https://github.com/timb-machine/linux-malware/blob/main/malware/binaries/Linux.Trojan.Multiverze/0a5a7008fa1a17c8ee32ea4e2f7e25d7302f9dfc4201c16d793a1d03f95b9fa5.elf.x86
                    sudo wget https://github.com/MalwareSamples/Linux-Malware-Samples/blob/fca968598631630d2b5609f460dd2fd0258d73f8/1f85b0c47432ab5abe651b8d0c0697f41b392eab9a0a966c41a623ea80432e74

    # Create ECR Repository
    AWSECRRepo:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: td-ecr-repo
            ImageScanningConfiguration: 
                ScanOnPush: false

Outputs:
    PublicDNSAWSServer01:
        Description: 'Public DNSName of the first EC2 Instance'
        Value: !GetAtt AWSServer01.PublicDnsName

    PublicDNSAWSServer02:
        Description: 'Public DNSName of the second EC2 Instance'
        Value: !GetAtt AWSServer02.PublicDnsName

    PublicDNSAWSServer03:
        Description: 'Public DNSName of the third EC2 Instance'
        Value: !GetAtt AWSServer03.PublicDnsName
