AWSTemplateFormatVersion: '2010-09-09'

Description: "Create 3 x Amazon EC2 instance running the Amazon Linux 2 AMI"

Parameters:

    MasterKeyPair: # Match to TD Resources
        Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'
        Type: 'AWS::EC2::KeyPair::KeyName'
        ConstraintDescription: 'Must be the name of an existing EC2 KeyPair.'

    InspectionVPCCIDR: # Match to TD Resources
        Description: 'Please enter the IP range (CIDR notation) for the top level VPC'
        Type: String
        Default: 10.10.0.0/16

    ProtectedPublicSubnetCIDR: # Match to TD Resources
        Description: 'Please enter the IP range (CIDR notation) for a PROTECTED-PUBLIC subnet'
        Type: String
        Default: 10.10.10.0/24

    ProtectedPublicSubnetAZ: # Match to TD Resources
        Description: 'Please enter the Availability Zone that you want to use for the PROTECTED-PUBLIC subnet'
        Type: String
        Default: us-east-1a


Resources:
    # Create a VPC
    VPC: # Match to TD Resources
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref InspectionVPCCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true

    # Create an Internet Gateway
    InternetGateway: # Match to TD Resources
        Type: AWS::EC2::InternetGateway
        Properties:
            Tags:
              - Key: Name
                Value: 'VPCIGW'

    # Attach the Internet Gateway to the VPC
    InternetGatewayAttachment: # Match to TD Resources
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    
    # Create a Protected Public Subnet
    ProtectedPublicSubnet: #Match to TD Resources
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref ProtectedPublicSubnetAZ
            CidrBlock: !Ref ProtectedPublicSubnetCIDR
            MapPublicIpOnLaunch: true

    AWSECRRepo:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: td-ecr-repo
            ImageScanningConfiguration: 
                ScanOnPush: false

    # Create Security Group for EC2 instances
    ECREC2SecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
            GroupName: "ECR EC2 Security Group"
            GroupDescription: 'Allow HTTPS inbound & outbound traffic'
            VpcId: !Ref VPC
            SecurityGroupEgress:
              - IpProtocol: tcp
                FromPort: 0
                ToPort: 65535
                CidrIp: 0.0.0.0/0

    #EC2 Role to be assumed and use to create the EC2 resources also allows SSM deployment.
    EC2ECRRole:
        Type: 'AWS::IAM::Role'
        Properties:
            RoleName: EC2RoleECRTechDay
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                - Effect: Allow
                Principal:
                Service:
                    - ec2.amazonaws.com
                Action:
                    - "sts:AssumeRole"
                ManagedPolicyArns: 
                    - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore

    #Instance profile
    EC2InstanceECRProfile:
        Type: 'AWS::IAM::InstanceProfile'
        Properties:
            Path: /
            Roles:
                - !Ref EC2ECRRole

    UseDockerToCreateAndPushToECR:
        Type: AWS::EC2::Instance
        Properties:
            SubnetId: !Ref ProtectedPublicSubnet
            IamInstanceProfile: !Ref EC2InstanceECRProfile
            SecurityGroupIds:
              - !Ref ECREC2SecurityGroup
            ImageId: ami-006dcf34c09e50022 # Amazon Linux 2: ImageID valid only in us-east-1 region
            KeyName: !Ref MasterKeyPair
            InstanceType: t2.medium
            UserData: 
                !Base64 | 
                    #!/bin/bash
                    sudo yum update -y
                    sudo yum install -y git
                    sudo amazon-linux-extras install -y docker
                    sudo service docker start
                    sudo amazon-linux-extras install -y java-openjdk11
                    cd home/ec2-user
                    git clone https://github.com/Github-JS-Ravas/AWS-CFN.git
                    cd Docker
                    sudo docker build . -t ECRImageDockerfile
                # docker tag ECRImageBuild:latest <‘account’>.dkr.ecr.us-east-1.amazonaws.com/ECRImageBuild:latest
                # docker push <‘account’>.dkr.ecr.us-east-1.amazonaws.com/ECRImageBuild:latest

                # docker run -p 8080:8080 --name ECRImageDockerfile ECRImageDockerfile   

Outputs:
    PublicDNSAWSServer01:
        Description: 'Public DNSName of the Docker EC2 Instance'
        Value: !GetAtt UseDockerToCreateAndPushToECR.PublicDnsName
    