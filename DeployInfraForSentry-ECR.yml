AWSTemplateFormatVersion: '2010-09-09'

Description: 'Create 1 x Amazon Private ECR and malicious container image'

Parameters:

    MasterKeyName: # Match to TD Resources
        Description: 'Name of an existing EC2 KeyPair to enable SSH access to the instance'
        Type: 'AWS::EC2::KeyPair::KeyName'
        ConstraintDescription: 'Must be the name of an existing EC2 KeyPair.'

    InspectionVPCCIDR: # Match to TD Resources
        Description: 'Please enter the IP range (CIDR notation) for the top level VPC'
        Type: String
        Default: 10.10.0.0/16

    ProtectedPublicSubnetCIDR: # Match to TD Resources
        Description: 'Please enter the IP range (CIDR notation) for a PROTECTED-PUBLIC subnet'
        Type: String
        Default: 10.10.10.0/24

    ProtectedPublicSubnetAZ: # Match to TD Resources
        Description: 'Please enter the Availability Zone that you want to use for the PROTECTED-PUBLIC subnet'
        Type: String
        Default: us-east-1a


Resources:
    # Create a VPC
    VPC: # Match to TD Resources
        Type: AWS::EC2::VPC
        Properties:
            CidrBlock: !Ref InspectionVPCCIDR
            EnableDnsSupport: true
            EnableDnsHostnames: true

    # Create an Internet Gateway
    InternetGateway: # Match to TD Resources
        Type: AWS::EC2::InternetGateway
        Properties:

    # Attach the Internet Gateway to the VPC
    InternetGatewayAttachment: # Match to TD Resources
        Type: AWS::EC2::VPCGatewayAttachment
        Properties:
            InternetGatewayId: !Ref InternetGateway
            VpcId: !Ref VPC
    
    # Create a Protected Public Subnet
    ProtectedPublicSubnet: #Match to TD Resources
        Type: AWS::EC2::Subnet
        Properties:
            VpcId: !Ref VPC
            AvailabilityZone: !Ref ProtectedPublicSubnetAZ
            CidrBlock: !Ref ProtectedPublicSubnetCIDR
            MapPublicIpOnLaunch: true

    AWSECRRepo:
        Type: AWS::ECR::Repository
        Properties: 
            RepositoryName: "TechDayRepo"
            ImageScanningConfiguration: 
                ScanOnPush: false

    UseDockerToCreateAndPushToECR:
        Type: AWS::EC2::Instance
        Properties:
            SubnetId: !Ref ProtectedPublicSubnet
            IamInstanceProfile: !Ref EC2InstanceProfile
            SecurityGroupIds: 
                - Ref: PublicAccessSecurityGroup
            ImageId: !Ref LatestLinuxAmiId
            KeyName: !Ref KeyPair
            InstanceType: t2.medium
            UserData: 
            !Base64 | 
                #!/bin/bash
                sudo yum update -y
                sudo yum install -y git
                sudo amazon-linux-extras install -y docker
                sudo service docker start
                sudo amazon-linux-extras install -y java-openjdk11
                cd home/ec2-user
                git clone https://github.com/christophetd/log4shell-vulnerable-app.git
                wget https://aws-workshop-c1as-cft-templates.s3.amazonaws.com/JNDIExploit.v1.2.zip
                cd log4shell-vulnerable-app
                sudo docker build . -t vulnerable-app
                docker run -p 8080:8080 --name vulnerable-app vulnerable-app     

Outputs:
    